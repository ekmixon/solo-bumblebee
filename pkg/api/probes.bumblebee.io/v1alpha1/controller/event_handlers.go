// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	probes_bumblebee_io_v1alpha1 "github.com/solo-io/bumblebee/pkg/api/probes.bumblebee.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the Probe Resource
// DEPRECATED: Prefer reconciler pattern.
type ProbeEventHandler interface {
	CreateProbe(obj *probes_bumblebee_io_v1alpha1.Probe) error
	UpdateProbe(old, new *probes_bumblebee_io_v1alpha1.Probe) error
	DeleteProbe(obj *probes_bumblebee_io_v1alpha1.Probe) error
	GenericProbe(obj *probes_bumblebee_io_v1alpha1.Probe) error
}

type ProbeEventHandlerFuncs struct {
	OnCreate  func(obj *probes_bumblebee_io_v1alpha1.Probe) error
	OnUpdate  func(old, new *probes_bumblebee_io_v1alpha1.Probe) error
	OnDelete  func(obj *probes_bumblebee_io_v1alpha1.Probe) error
	OnGeneric func(obj *probes_bumblebee_io_v1alpha1.Probe) error
}

func (f *ProbeEventHandlerFuncs) CreateProbe(obj *probes_bumblebee_io_v1alpha1.Probe) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *ProbeEventHandlerFuncs) DeleteProbe(obj *probes_bumblebee_io_v1alpha1.Probe) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *ProbeEventHandlerFuncs) UpdateProbe(objOld, objNew *probes_bumblebee_io_v1alpha1.Probe) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *ProbeEventHandlerFuncs) GenericProbe(obj *probes_bumblebee_io_v1alpha1.Probe) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type ProbeEventWatcher interface {
	AddEventHandler(ctx context.Context, h ProbeEventHandler, predicates ...predicate.Predicate) error
}

type probeEventWatcher struct {
	watcher events.EventWatcher
}

func NewProbeEventWatcher(name string, mgr manager.Manager) ProbeEventWatcher {
	return &probeEventWatcher{
		watcher: events.NewWatcher(name, mgr, &probes_bumblebee_io_v1alpha1.Probe{}),
	}
}

func (c *probeEventWatcher) AddEventHandler(ctx context.Context, h ProbeEventHandler, predicates ...predicate.Predicate) error {
	handler := genericProbeHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericProbeHandler implements a generic events.EventHandler
type genericProbeHandler struct {
	handler ProbeEventHandler
}

func (h genericProbeHandler) Create(object client.Object) error {
	obj, ok := object.(*probes_bumblebee_io_v1alpha1.Probe)
	if !ok {
		return errors.Errorf("internal error: Probe handler received event for %T", object)
	}
	return h.handler.CreateProbe(obj)
}

func (h genericProbeHandler) Delete(object client.Object) error {
	obj, ok := object.(*probes_bumblebee_io_v1alpha1.Probe)
	if !ok {
		return errors.Errorf("internal error: Probe handler received event for %T", object)
	}
	return h.handler.DeleteProbe(obj)
}

func (h genericProbeHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*probes_bumblebee_io_v1alpha1.Probe)
	if !ok {
		return errors.Errorf("internal error: Probe handler received event for %T", old)
	}
	objNew, ok := new.(*probes_bumblebee_io_v1alpha1.Probe)
	if !ok {
		return errors.Errorf("internal error: Probe handler received event for %T", new)
	}
	return h.handler.UpdateProbe(objOld, objNew)
}

func (h genericProbeHandler) Generic(object client.Object) error {
	obj, ok := object.(*probes_bumblebee_io_v1alpha1.Probe)
	if !ok {
		return errors.Errorf("internal error: Probe handler received event for %T", object)
	}
	return h.handler.GenericProbe(obj)
}
