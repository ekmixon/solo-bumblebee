// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	probes_bumblebee_io_v1alpha1 "github.com/solo-io/bumblebee/pkg/api/probes.bumblebee.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the Probe Resource.
// implemented by the user
type ProbeReconciler interface {
	ReconcileProbe(obj *probes_bumblebee_io_v1alpha1.Probe) (reconcile.Result, error)
}

// Reconcile deletion events for the Probe Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type ProbeDeletionReconciler interface {
	ReconcileProbeDeletion(req reconcile.Request) error
}

type ProbeReconcilerFuncs struct {
	OnReconcileProbe         func(obj *probes_bumblebee_io_v1alpha1.Probe) (reconcile.Result, error)
	OnReconcileProbeDeletion func(req reconcile.Request) error
}

func (f *ProbeReconcilerFuncs) ReconcileProbe(obj *probes_bumblebee_io_v1alpha1.Probe) (reconcile.Result, error) {
	if f.OnReconcileProbe == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileProbe(obj)
}

func (f *ProbeReconcilerFuncs) ReconcileProbeDeletion(req reconcile.Request) error {
	if f.OnReconcileProbeDeletion == nil {
		return nil
	}
	return f.OnReconcileProbeDeletion(req)
}

// Reconcile and finalize the Probe Resource
// implemented by the user
type ProbeFinalizer interface {
	ProbeReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	ProbeFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeProbe(obj *probes_bumblebee_io_v1alpha1.Probe) error
}

type ProbeReconcileLoop interface {
	RunProbeReconciler(ctx context.Context, rec ProbeReconciler, predicates ...predicate.Predicate) error
}

type probeReconcileLoop struct {
	loop reconcile.Loop
}

func NewProbeReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) ProbeReconcileLoop {
	return &probeReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &probes_bumblebee_io_v1alpha1.Probe{}, options),
	}
}

func (c *probeReconcileLoop) RunProbeReconciler(ctx context.Context, reconciler ProbeReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericProbeReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(ProbeFinalizer); ok {
		reconcilerWrapper = genericProbeFinalizer{
			genericProbeReconciler: genericReconciler,
			finalizingReconciler:   finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericProbeHandler implements a generic reconcile.Reconciler
type genericProbeReconciler struct {
	reconciler ProbeReconciler
}

func (r genericProbeReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*probes_bumblebee_io_v1alpha1.Probe)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Probe handler received event for %T", object)
	}
	return r.reconciler.ReconcileProbe(obj)
}

func (r genericProbeReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(ProbeDeletionReconciler); ok {
		return deletionReconciler.ReconcileProbeDeletion(request)
	}
	return nil
}

// genericProbeFinalizer implements a generic reconcile.FinalizingReconciler
type genericProbeFinalizer struct {
	genericProbeReconciler
	finalizingReconciler ProbeFinalizer
}

func (r genericProbeFinalizer) FinalizerName() string {
	return r.finalizingReconciler.ProbeFinalizerName()
}

func (r genericProbeFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*probes_bumblebee_io_v1alpha1.Probe)
	if !ok {
		return errors.Errorf("internal error: Probe handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeProbe(obj)
}
