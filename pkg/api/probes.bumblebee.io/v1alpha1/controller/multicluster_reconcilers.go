// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	probes_bumblebee_io_v1alpha1 "github.com/solo-io/bumblebee/pkg/api/probes.bumblebee.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the Probe Resource across clusters.
// implemented by the user
type MulticlusterProbeReconciler interface {
	ReconcileProbe(clusterName string, obj *probes_bumblebee_io_v1alpha1.Probe) (reconcile.Result, error)
}

// Reconcile deletion events for the Probe Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterProbeDeletionReconciler interface {
	ReconcileProbeDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterProbeReconcilerFuncs struct {
	OnReconcileProbe         func(clusterName string, obj *probes_bumblebee_io_v1alpha1.Probe) (reconcile.Result, error)
	OnReconcileProbeDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterProbeReconcilerFuncs) ReconcileProbe(clusterName string, obj *probes_bumblebee_io_v1alpha1.Probe) (reconcile.Result, error) {
	if f.OnReconcileProbe == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileProbe(clusterName, obj)
}

func (f *MulticlusterProbeReconcilerFuncs) ReconcileProbeDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileProbeDeletion == nil {
		return nil
	}
	return f.OnReconcileProbeDeletion(clusterName, req)
}

type MulticlusterProbeReconcileLoop interface {
	// AddMulticlusterProbeReconciler adds a MulticlusterProbeReconciler to the MulticlusterProbeReconcileLoop.
	AddMulticlusterProbeReconciler(ctx context.Context, rec MulticlusterProbeReconciler, predicates ...predicate.Predicate)
}

type multiclusterProbeReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterProbeReconcileLoop) AddMulticlusterProbeReconciler(ctx context.Context, rec MulticlusterProbeReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericProbeMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterProbeReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterProbeReconcileLoop {
	return &multiclusterProbeReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &probes_bumblebee_io_v1alpha1.Probe{}, options)}
}

type genericProbeMulticlusterReconciler struct {
	reconciler MulticlusterProbeReconciler
}

func (g genericProbeMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterProbeDeletionReconciler); ok {
		return deletionReconciler.ReconcileProbeDeletion(cluster, req)
	}
	return nil
}

func (g genericProbeMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*probes_bumblebee_io_v1alpha1.Probe)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: Probe handler received event for %T", object)
	}
	return g.reconciler.ReconcileProbe(cluster, obj)
}
